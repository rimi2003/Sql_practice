--- 21.From the following tables write a SQL query to find all those salespeople whose names appear alphabetically lower than the customer’s name. Return salesman_id, name, city, commission.

select * from salesman;
select * from customer;

select * from salesman a
where exists
(select * from customer b
where a.name < b.cust_name);

-- Selecting all columns from the 'salesman' table (aliased as 'a')
SELECT *
-- Specifying the table to retrieve data from ('salesman' as 'a')
FROM salesman a
-- Checking the existence of records in a subquery
WHERE EXISTS
   -- Subquery: Selecting any record from the 'customer' table (aliased as 'b') where the 'name' in the outer query is less than 'cust_name' in the subquery
   (SELECT *
	FROM CUSTOMER b
	WHERE  a.name  < b.cust_name);

---22. From the following table write a SQL query to find all those customers with a higher grade than all the customers alphabetically below the city of New York. Return customer_id, cust_name, city, grade, salesman_id.

select * from customer 
where grade> any
(select grade from customer where city<'new york');

----23.From the following table write a SQL query to find all those orders whose order amount exceeds at least one of the orders placed on 9th may 2024. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

select * from customer  

select ord_no, purch_amt, ord_date, customer_id, salesman_id
from orders_1 od
where purch_amt > (select purch_amt from orders_1 where ord_date='2024-05-09'); 

---24. From the following tables write a SQL query to find orders where the order amount is less than the order amount of a customer residing in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id. 
select * from orders_1
WHERE purch_amt < ANY
   -- Correlated Subquery: Selecting 'purch_amt' values from the 'orders' table (aliased as 'a') where 'customer_id' matches the outer query's 'customer_id' and 'city' is 'London' in the 'customer' table (aliased as 'b')
   (SELECT purch_amt
	FROM orders_1 a, customer b
	WHERE  a.customer_id = b.customer_id
	AND b.city = 'London');

---25.  From the following tables write a SQL query to find those orders where every order amount is less than the maximum order amount of a customer who lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.

select * from customer
select * from orders_1
where purch_amt<(select max(purch_amt) from orders_1 a, customer b
where a.customer_id = b.customer_id
and b.city='london');

---26. From the following tables write a SQL query to find those customers whose grades are higher than those living in New York City. Return customer_id, cust_name, city, grade and salesman_id.
select * from customer as c1
where grade >all (select grade from customer as c2 where city='new york'); 

---27. From the following tables write a SQL query to calculate the total order amount generated by a salesperson. Salespersons should be from the cities where the customers reside. Return salesperson name, city and total order amount.
----doubt---

---28.From the following tables write a SQL query to find those customers whose grades are not the same as those who live in London City. Return customer_id, cust_name, city, grade and salesman_id.
select * from customer
where grade <> all (select grade from customer where city='london' AND NOT grade IS NULL);

---29.From the following tables write a SQL query to find those customers whose grades are different from those living in Paris. Return customer_id, cust_name, city, grade and salesman_id.
select * from customer
where grade not in (select grade from customer where city='london');

---30. From the following tables write a SQL query to find all those customers who have different grades than any customer who lives in Dallas City. Return customer_id, cust_name,city, grade and salesman_id.
select * from customer
where grade not in (select grade from customer where city='Dallas');

----------2nd method------
SELECT *
-- Specifying the table to retrieve data from ('customer')
FROM customer 
-- Filtering the results based on the condition that 'grade' is not equal to any value in the set of 'grade' values returned by a subquery
WHERE NOT grade = ANY
   -- Subquery: Selecting 'grade' values from the 'customer' table where 'city' is 'Dallas'
   (SELECT grade
	FROM customer
	WHERE city='Dallas');

---31. From the following tables write a SQL query to calculate the average price of each manufacturer's product along with their name. Return Average Price and Company
CREATE TABLE company (
    COM_ID INT,
    COM_NAME VARCHAR(100)
);
select * from company
INSERT INTO company (COM_ID, COM_NAME)
VALUES
    (11, 'Samsung'),
    (12, 'iBall'),
    (13, 'Epsion'),
    (14, 'Zebronics'),
    (15, 'Asus'),
    (16, 'Frontech');
CREATE TABLE product_1 (
    PRO_ID INT,
    PRO_NAME VARCHAR(100),
    PRO_PRICE DECIMAL(10, 2),
    PRO_COM INT
);
drop table product_1

----
INSERT INTO product_1(PRO_ID, PRO_NAME, PRO_PRICE, PRO_COM)
VALUES
    (101, 'Mother Board', 3200.00, 15),
    (102, 'Key Board', 450.00, 16),
    (103, 'ZIP drive', 250.00, 14),
    (104, 'Speaker', 550.00, 16),
    (105, 'Monitor', 5000.00, 11),
    (106, 'DVD drive', 900.00, 12),
    (107, 'CD drive', 800.00, 12),
    (108, 'Printer', 2600.00, 13),
    (109, 'Refill cartridge', 350.00, 13),
    (110, 'Mouse', 250.00, 12);

	select * from product_1

SELECT 
    c.COM_NAME AS Company,
    AVG(p.PRO_PRICE) AS Average_Price
FROM 
    product_1 p
JOIN 
    company c ON p.PRO_COM = c.COM_ID
GROUP BY 
    c.COM_NAME;

---32. From the following tables write a SQL query to calculate the average price of each manufacturer's product of 350 or more. Return Average Price and Company.
select
avg(p.PRO_PRICE) as avg_price, 
c.COM_NAME AS Company
from product_1 p
join company c on p.PRO_COM = c.COM_ID
group by c.COM_NAME
having avg(PRO_PRICE)>=350;

---33.From the following tables, write a SQL query to find the most expensive product of each company. 
---Return Product Name, Price and Company.

SELECT c.COM_NAME AS Company,
       p.PRO_NAME AS Product_Name,
       p.PRO_PRICE AS Price
FROM (
    SELECT PRO_COM, MAX(PRO_PRICE) AS Max_Price
    FROM product
    GROUP BY PRO_COM
) AS max_prices
JOIN product p ON max_prices.PRO_COM = p.PRO_COM AND max_prices.Max_Price = p.PRO_PRICE
JOIN company c ON p.PRO_COM = c.COM_ID;














